<?php


// Inclusion des fichiers n√©cessaires
require_once 'database.php';
require_once 'Category.php';

// Configuration pour l'affichage des erreurs
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h1>üîÑ Test Job 10 - M√©thode update() de Product</h1>";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f9fa; }
    .container { max-width: 1000px; margin: 0 auto; }
    .test-block { 
        background: white;
        border: 2px solid #007bff; 
        margin: 20px 0; 
        padding: 20px; 
        border-radius: 10px; 
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .success { color: #28a745; font-weight: bold; }
    .error { color: #dc3545; font-weight: bold; }
    .warning { color: #ffc107; font-weight: bold; }
    .info { color: #007bff; font-weight: bold; }
    .code-block { 
        background: #f8f9fa; 
        padding: 15px; 
        border-radius: 5px; 
        border-left: 4px solid #007bff;
        margin: 10px 0;
        font-family: 'Courier New', monospace;
    }
    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin: 10px 0;
    }
    .data-table th, .data-table td {
        border: 1px solid #dee2e6;
        padding: 8px 12px;
        text-align: left;
    }
    .data-table th {
        background-color: #e9ecef;
        font-weight: bold;
    }
    .step {
        background: #e3f2fd;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        border-left: 4px solid #2196f3;
    }
</style>";

echo "<div class='container'>";

/**
 * Fonction pour afficher un test de mani√®re format√©e
 */
function displayTest($title, $success, $details = null, $data = null) {
    echo "<div class='test-block'>";
    echo "<h3>üß™ $title</h3>";
    
    if ($success) {
        echo "<p class='success'>‚úÖ SUCC√àS</p>";
    } else {
        echo "<p class='error'>‚ùå √âCHEC</p>";
    }
    
    if ($details) {
        echo "<p>$details</p>";
    }
    
    if ($data) {
        echo "<div class='code-block'>";
        echo "<strong>Donn√©es:</strong><br>";
        if (is_array($data)) {
            foreach ($data as $key => $value) {
                echo "‚Ä¢ <strong>$key:</strong> " . (is_object($value) ? get_class($value) : $value) . "<br>";
            }
        } else {
            var_dump($data);
        }
        echo "</div>";
    }
    echo "</div>";
}

/**
 * Fonction pour comparer les donn√©es avant/apr√®s
 */
function displayComparison($before, $after) {
    echo "<table class='data-table'>";
    echo "<tr><th>Propri√©t√©</th><th>Avant</th><th>Apr√®s</th><th>Modifi√©</th></tr>";
    
    $properties = ['ID', 'Nom', 'Prix', 'Quantit√©', 'Description', 'Cat√©gorie', 'UpdatedAt'];
    $beforeData = [
        $before->getId(),
        $before->getName(),
        $before->getPrice(),
        $before->getQuantity(),
        $before->getDescription(),
        $before->getCategoryId(),
        $before->getUpdatedAt()->format('Y-m-d H:i:s')
    ];
    $afterData = [
        $after->getId(),
        $after->getName(),
        $after->getPrice(),
        $after->getQuantity(),
        $after->getDescription(),
        $after->getCategoryId(),
        $after->getUpdatedAt()->format('Y-m-d H:i:s')
    ];
    
    for ($i = 0; $i < count($properties); $i++) {
        $changed = $beforeData[$i] != $afterData[$i];
        $changeClass = $changed ? 'success' : '';
        $changeIcon = $changed ? 'üîÑ' : '‚ö™';
        
        echo "<tr>";
        echo "<td><strong>{$properties[$i]}</strong></td>";
        echo "<td>{$beforeData[$i]}</td>";
        echo "<td class='$changeClass'>{$afterData[$i]}</td>";
        echo "<td>$changeIcon</td>";
        echo "</tr>";
    }
    echo "</table>";
}

try {
    echo "<div class='test-block'>";
    echo "<h2>üéØ Objectif du Job 10</h2>";
    echo "<p class='info'>Cr√©er une m√©thode publique <code>update()</code> qui:</p>";
    echo "<ul>";
    echo "<li>Ne prend <strong>aucun param√®tre</strong></li>";
    echo "<li>Met √† jour une ligne de la table product</li>";
    echo "<li>Correspond √† l'ID de l'instance en cours</li>";
    echo "<li>Retourne l'instance modifi√©e ou false en cas d'√©chec</li>";
    echo "</ul>";
    echo "</div>";

    // V√©rification de la connexion
    $pdo = getDatabaseConnection();
    displayTest("Connexion √† la base de donn√©es", true, "Connexion √©tablie avec succ√®s");

    // =====================================
    // TEST 1: Pr√©paration - R√©cup√©ration d'un produit existant
    // =====================================
    
    echo "<div class='step'>";
    echo "<strong>üìã √âTAPE 1:</strong> R√©cup√©ration d'un produit existant pour les tests";
    echo "</div>";
    
    $product = new Product();
    $originalProduct = $product->findOneById(1);
    
    if (!$originalProduct) {
        echo "<div class='test-block'>";
        echo "<p class='error'>‚ùå Impossible de r√©cup√©rer le produit avec ID=1</p>";
        echo "<p>Cr√©ation d'un produit de test...</p>";
        
        // Cr√©er un produit de test
        $testProduct = new Product(
            0,
            "Produit Test Update",
            [],
            59.99,
            "Produit cr√©√© pour tester la m√©thode update",
            10,
            1
        );
        
        $originalProduct = $testProduct->create();
        if (!$originalProduct) {
            throw new Exception("Impossible de cr√©er un produit de test");
        }
        echo "<p class='success'>‚úÖ Produit de test cr√©√© avec ID: " . $originalProduct->getId() . "</p>";
        echo "</div>";
    }

    displayTest(
        "R√©cup√©ration du produit √† modifier", 
        $originalProduct !== false,
        "Produit r√©cup√©r√© avec ID: " . $originalProduct->getId(),
        [
            'ID' => $originalProduct->getId(),
            'Nom actuel' => $originalProduct->getName(),
            'Prix actuel' => $originalProduct->getPrice() . '‚Ç¨',
            'Stock actuel' => $originalProduct->getQuantity(),
            'Cat√©gorie' => $originalProduct->getCategoryId()
        ]
    );

    // Sauvegarde de l'√©tat original pour comparaison
    $originalData = [
        'name' => $originalProduct->getName(),
        'price' => $originalProduct->getPrice(),
        'quantity' => $originalProduct->getQuantity(),
        'description' => $originalProduct->getDescription(),
        'updatedAt' => $originalProduct->getUpdatedAt()->format('Y-m-d H:i:s')
    ];

    // =====================================
    // TEST 2: Test basique de la m√©thode update()
    // =====================================
    
    echo "<div class='step'>";
    echo "<strong>üîß √âTAPE 2:</strong> Test de la m√©thode update() - Modifications basiques";
    echo "</div>";

    // Attendre 1 seconde pour s'assurer que updatedAt change
    sleep(1);

    // Modification des propri√©t√©s
    $newName = "Produit MODIFI√â par update() - " . date('H:i:s');
    $newPrice = round($originalProduct->getPrice() + 10.50, 2);
    $newQuantity = $originalProduct->getQuantity() + 5;
    $newDescription = "Description mise √† jour le " . date('Y-m-d H:i:s');

    $originalProduct->setName($newName);
    $originalProduct->setPrice($newPrice);
    $originalProduct->setQuantity($newQuantity);
    $originalProduct->setDescription($newDescription);

    echo "<div class='code-block'>";
    echo "<strong>Modifications appliqu√©es:</strong><br>";
    echo "‚Ä¢ Nom: \"$newName\"<br>";
    echo "‚Ä¢ Prix: $newPrice ‚Ç¨<br>";
    echo "‚Ä¢ Quantit√©: $newQuantity<br>";
    echo "‚Ä¢ Description: \"$newDescription\"<br>";
    echo "</div>";

    // Appel de la m√©thode update()
    $updateResult = $originalProduct->update();

    displayTest(
        "Ex√©cution de la m√©thode update()",
        $updateResult !== false,
        $updateResult ? "Mise √† jour r√©ussie" : "√âchec de la mise √† jour",
        $updateResult ? [
            'Type de retour' => gettype($updateResult),
            'Instance retourn√©e' => $updateResult instanceof Product ? 'OUI' : 'NON',
            'ID maintenu' => $updateResult->getId() === $originalProduct->getId() ? 'OUI' : 'NON'
        ] : null
    );

    // =====================================
    // TEST 3: V√©rification en base de donn√©es
    // =====================================
    
    echo "<div class='step'>";
    echo "<strong>üîç √âTAPE 3:</strong> V√©rification que les donn√©es ont √©t√© persist√©es en base";
    echo "</div>";

    // R√©cup√©ration fra√Æche depuis la base
    $verificationProduct = new Product();
    $freshProduct = $verificationProduct->findOneById($originalProduct->getId());

    $dbUpdateSuccess = $freshProduct && 
                      $freshProduct->getName() === $newName &&
                      $freshProduct->getPrice() === $newPrice &&
                      $freshProduct->getQuantity() === $newQuantity;

    displayTest(
        "V√©rification des donn√©es en base",
        $dbUpdateSuccess,
        "R√©cup√©ration fra√Æche depuis la base de donn√©es",
        $freshProduct ? [
            'Nom en base' => $freshProduct->getName(),
            'Prix en base' => $freshProduct->getPrice(),
            'Quantit√© en base' => $freshProduct->getQuantity(),
            'UpdatedAt en base' => $freshProduct->getUpdatedAt()->format('Y-m-d H:i:s')
        ] : null
    );

    // Affichage de la comparaison avant/apr√®s
    if ($freshProduct) {
        echo "<div class='test-block'>";
        echo "<h3>üìä Comparaison Avant/Apr√®s</h3>";
        echo "<p>Reconstruction de l'√©tat original vs √©tat actuel:</p>";
        
        // Reconstruction de l'objet original pour comparaison
        $beforeProduct = new Product(
            $originalProduct->getId(),
            $originalData['name'],
            [],
            $originalData['price'],
            $originalData['description'],
            $originalData['quantity'],
            $originalProduct->getCategoryId(),
            new DateTime($originalData['updatedAt']),
            new DateTime($originalData['updatedAt'])
        );
        
        displayComparison($beforeProduct, $freshProduct);
        echo "</div>";
    }

    // =====================================
    // TEST 4: Test des cas d'erreur
    // =====================================
    
    echo "<div class='step'>";
    echo "<strong>‚ö†Ô∏è √âTAPE 4:</strong> Tests des cas d'erreur et validations";
    echo "</div>";

    // Test 4.1: Produit avec ID invalide
    $invalidProduct = new Product();
    $invalidProduct->setId(0); // ID invalide
    $invalidProduct->setName("Test");
    $invalidProduct->setPrice(10);
    $invalidProduct->setQuantity(5);
    $invalidProduct->setCategoryId(1);

    try {
        $invalidResult = $invalidProduct->update();
        displayTest(
            "Test ID invalide (0)",
            $invalidResult === false,
            "update() doit retourner false pour un ID invalide"
        );
    } catch (InvalidArgumentException $e) {
        displayTest(
            "Test ID invalide (0)",
            true,
            "Exception correctement lev√©e: " . $e->getMessage()
        );
    }

    // Test 4.2: Produit inexistant
    $nonExistentProduct = new Product();
    $nonExistentProduct->setId(999999); // ID qui n'existe pas
    $nonExistentProduct->setName("Test");
    $nonExistentProduct->setPrice(10);
    $nonExistentProduct->setQuantity(5);
    $nonExistentProduct->setCategoryId(1);

    $nonExistentResult = $nonExistentProduct->update();
    displayTest(
        "Test produit inexistant (ID: 999999)",
        $nonExistentResult === false,
        "update() doit retourner false si le produit n'existe pas en base"
    );

    // Test 4.3: Validation des donn√©es
    $validationProduct = clone $originalProduct;
    $validationProduct->setName(""); // Nom vide

    try {
        $validationResult = $validationProduct->update();
        displayTest(
            "Test validation - Nom vide",
            $validationResult === false,
            "update() doit rejeter un nom vide"
        );
    } catch (InvalidArgumentException $e) {
        displayTest(
            "Test validation - Nom vide",
            true,
            "Exception de validation correctement lev√©e: " . $e->getMessage()
        );
    }

    // =====================================
    // TEST 5: Test de performance
    // =====================================
    
    echo "<div class='step'>";
    echo "<strong>‚ö° √âTAPE 5:</strong> Test de performance";
    echo "</div>";

    $performanceProduct = clone $originalProduct;
    $performanceProduct->setName("Test Performance " . microtime(true));
    
    $startTime = microtime(true);
    $performanceResult = $performanceProduct->update();
    $endTime = microtime(true);
    
    $executionTime = ($endTime - $startTime) * 1000; // en millisecondes
    
    displayTest(
        "Performance de update()",
        $executionTime < 500, // Moins de 500ms
        "Temps d'ex√©cution: " . round($executionTime, 2) . " ms",
        [
            'Seuil acceptable' => '< 500ms',
            'Temps mesur√©' => round($executionTime, 2) . ' ms',
            'Performance' => $executionTime < 100 ? 'Excellente' : ($executionTime < 500 ? 'Bonne' : '√Ä optimiser')
        ]
    );

    // =====================================
    // R√âSUM√â FINAL
    // =====================================
    
    echo "<div class='test-block' style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;'>";
    echo "<h2>üéâ R√©sum√© du Job 10</h2>";
    echo "<h3>‚úÖ Fonctionnalit√©s valid√©es:</h3>";
    echo "<ul>";
    echo "<li>‚úÖ M√©thode update() sans param√®tres</li>";
    echo "<li>‚úÖ Mise √† jour bas√©e sur l'ID de l'instance</li>";
    echo "<li>‚úÖ Retour de l'instance modifi√©e en cas de succ√®s</li>";
    echo "<li>‚úÖ Retour false en cas d'√©chec</li>";
    echo "<li>‚úÖ Persistence des donn√©es en base</li>";
    echo "<li>‚úÖ Mise √† jour automatique du timestamp updatedAt</li>";
    echo "<li>‚úÖ Validation des donn√©es d'entr√©e</li>";
    echo "<li>‚úÖ Gestion des cas d'erreur</li>";
    echo "</ul>";
    
    echo "<h3>üéØ Conformit√© Job 10:</h3>";
    echo "<p><strong>R√âUSSI</strong> - La m√©thode update() respecte toutes les exigences du Job 10!</p>";
    echo "</div>";

} catch (Exception $e) {
    echo "<div class='test-block' style='background: #f8d7da; border-color: #f5c6cb;'>";
    echo "<h3 class='error'>üí• Erreur critique pendant les tests</h3>";
    echo "<p class='error'><strong>Message:</strong> " . $e->getMessage() . "</p>";
    echo "<p><strong>Fichier:</strong> " . $e->getFile() . " (ligne " . $e->getLine() . ")</p>";
    echo "<details>";
    echo "<summary>Voir la stack trace compl√®te</summary>";
    echo "<pre>" . $e->getTraceAsString() . "</pre>";
    echo "</details>";
    echo "</div>";
}

echo "</div>"; // Fermeture du container


?>