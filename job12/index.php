<?php
require_once 'database.php';
require_once 'Category.php';

echo "<h1>üîÑ Test Job 12 - Classes Clothing et Electronic</h1>";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f9fa; }
    .container { max-width: 1200px; margin: 0 auto; }
    .test-block { 
        background: white;
        border: 2px solid #007bff; 
        margin: 20px 0; 
        padding: 20px; 
        border-radius: 10px; 
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .success { color: #28a745; font-weight: bold; }
    .error { color: #dc3545; font-weight: bold; }
    .warning { color: #ffc107; font-weight: bold; }
    .info { color: #007bff; font-weight: bold; }
    .code-block { 
        background: #f8f9fa; 
        padding: 15px; 
        border-radius: 5px; 
        border-left: 4px solid #007bff;
        margin: 10px 0;
        font-family: 'Courier New', monospace;
    }
    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin: 10px 0;
    }
    .data-table th, .data-table td {
        border: 1px solid #dee2e6;
        padding: 8px 12px;
        text-align: left;
    }
    .data-table th {
        background-color: #e9ecef;
        font-weight: bold;
    }
    .step {
        background: #e3f2fd;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        border-left: 4px solid #2196f3;
    }
    .category-clothing { border-left-color: #ff6b6b; }
    .category-electronic { border-left-color: #4ecdc4; }
    .method-test { border-left-color: #45b7d1; }
</style>";

echo "<div class='container'>";

// ===============================
// SECTION 1: TESTS DE LA CLASSE CLOTHING
// ===============================

echo "<div class='test-block category-clothing'>";
echo "<h2>üëï Tests de la classe Clothing</h2>";

echo "<div class='step'>";
echo "<h3>√âtape 1: Test de la m√©thode create() pour Clothing</h3>";

try {
    // Cr√©ation d'un nouveau v√™tement
    $clothing = new Clothing();
    $clothing->setName("T-shirt Bio Premium");
    $clothing->setDescription("T-shirt en coton bio certifi√© GOTS");
    $clothing->setPrice(29.99);
    $clothing->setQuantity(50);
    $clothing->setCategoryId(1); // Cat√©gorie V√™tements
    
    // Propri√©t√©s sp√©cifiques aux v√™tements
    $clothing->setSize("M");
    $clothing->setColor("Bleu Marine");
    $clothing->setType("T-shirt");
    $clothing->setMaterialFee(5);

    echo "<div class='code-block'>";
    echo "Cr√©ation d'un nouveau v√™tement:<br>";
    echo "Nom: " . $clothing->getName() . "<br>";
    echo "Taille: " . $clothing->getSize() . "<br>";
    echo "Couleur: " . $clothing->getColor() . "<br>";
    echo "Type: " . $clothing->getType() . "<br>";
    echo "Frais mat√©riel: " . $clothing->getMaterialFee() . "‚Ç¨<br>";
    echo "</div>";

    $result = $clothing->create();
    
    if ($result) {
        echo "<p class='success'>‚úÖ V√™tement cr√©√© avec succ√®s ! ID: " . $result->getId() . "</p>";
        $newClothingId = $result->getId();
    } else {
        echo "<p class='error'>‚ùå √âchec de la cr√©ation du v√™tement</p>";
        $newClothingId = null;
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Erreur lors de la cr√©ation: " . $e->getMessage() . "</p>";
    $newClothingId = null;
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 2: Test de la m√©thode findOneById() pour Clothing</h3>";

if ($newClothingId) {
    try {
        $clothingTest = new Clothing();
        $foundClothing = $clothingTest->findOneById($newClothingId);
        
        if ($foundClothing) {
            echo "<p class='success'>‚úÖ V√™tement trouv√© avec l'ID $newClothingId</p>";
            
            echo "<table class='data-table'>";
            echo "<tr><th>Propri√©t√©</th><th>Valeur</th></tr>";
            echo "<tr><td>ID</td><td>" . $foundClothing->getId() . "</td></tr>";
            echo "<tr><td>Nom</td><td>" . $foundClothing->getName() . "</td></tr>";
            echo "<tr><td>Prix</td><td>" . $foundClothing->getPrice() . "‚Ç¨</td></tr>";
            echo "<tr><td>Stock</td><td>" . $foundClothing->getQuantity() . "</td></tr>";
            echo "<tr><td>Taille</td><td>" . $foundClothing->getSize() . "</td></tr>";
            echo "<tr><td>Couleur</td><td>" . $foundClothing->getColor() . "</td></tr>";
            echo "<tr><td>Type</td><td>" . $foundClothing->getType() . "</td></tr>";
            echo "<tr><td>Frais mat√©riel</td><td>" . $foundClothing->getMaterialFee() . "‚Ç¨</td></tr>";
            echo "</table>";
        } else {
            echo "<p class='error'>‚ùå Aucun v√™tement trouv√© avec l'ID $newClothingId</p>";
        }
        
    } catch (Exception $e) {
        echo "<p class='error'>‚ùå Erreur lors de la recherche: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p class='warning'>‚ö†Ô∏è Impossible de tester findOneById car aucun ID disponible</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 3: Test de la m√©thode update() pour Clothing</h3>";

if ($newClothingId && isset($foundClothing)) {
    try {
        // Modification des propri√©t√©s
        $foundClothing->setName("T-shirt Bio Premium - √âdition Limit√©e");
        $foundClothing->setPrice(34.99);
        $foundClothing->setQuantity(45);
        $foundClothing->setSize("L");
        $foundClothing->setColor("Rouge");
        $foundClothing->setMaterialFee(7);
        
        echo "<div class='code-block'>";
        echo "Modifications apport√©es:<br>";
        echo "Nouveau nom: " . $foundClothing->getName() . "<br>";
        echo "Nouveau prix: " . $foundClothing->getPrice() . "‚Ç¨<br>";
        echo "Nouvelle taille: " . $foundClothing->getSize() . "<br>";
        echo "Nouvelle couleur: " . $foundClothing->getColor() . "<br>";
        echo "</div>";
        
        $updateResult = $foundClothing->update();
        
        if ($updateResult) {
            echo "<p class='success'>‚úÖ V√™tement mis √† jour avec succ√®s !</p>";
            
            // V√©rification des modifications
            $verifyClothing = new Clothing();
            $verifiedClothing = $verifyClothing->findOneById($newClothingId);
            
            if ($verifiedClothing) {
                echo "<h4>V√©rification des modifications:</h4>";
                echo "<table class='data-table'>";
                echo "<tr><th>Propri√©t√©</th><th>Nouvelle valeur</th></tr>";
                echo "<tr><td>Nom</td><td>" . $verifiedClothing->getName() . "</td></tr>";
                echo "<tr><td>Prix</td><td>" . $verifiedClothing->getPrice() . "‚Ç¨</td></tr>";
                echo "<tr><td>Taille</td><td>" . $verifiedClothing->getSize() . "</td></tr>";
                echo "<tr><td>Couleur</td><td>" . $verifiedClothing->getColor() . "</td></tr>";
                echo "</table>";
            }
        } else {
            echo "<p class='error'>‚ùå √âchec de la mise √† jour du v√™tement</p>";
        }
        
    } catch (Exception $e) {
        echo "<p class='error'>‚ùå Erreur lors de la mise √† jour: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p class='warning'>‚ö†Ô∏è Impossible de tester update car aucun v√™tement disponible</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 4: Test de la m√©thode findAll() pour Clothing</h3>";

try {
    $clothingCollection = new Clothing();
    $allClothings = $clothingCollection->findAll();
    
    echo "<p class='info'>üìä Nombre total de v√™tements trouv√©s: " . count($allClothings) . "</p>";
    
    if (count($allClothings) > 0) {
        echo "<table class='data-table'>";
        echo "<tr><th>ID</th><th>Nom</th><th>Taille</th><th>Couleur</th><th>Type</th><th>Prix</th><th>Stock</th></tr>";
        
        foreach ($allClothings as $clothing) {
            echo "<tr>";
            echo "<td>" . $clothing->getId() . "</td>";
            echo "<td>" . $clothing->getName() . "</td>";
            echo "<td>" . $clothing->getSize() . "</td>";
            echo "<td>" . $clothing->getColor() . "</td>";
            echo "<td>" . $clothing->getType() . "</td>";
            echo "<td>" . $clothing->getPrice() . "‚Ç¨</td>";
            echo "<td>" . $clothing->getQuantity() . "</td>";
            echo "</tr>";
        }
        echo "</table>";
        echo "<p class='success'>‚úÖ Tous les v√™tements ont √©t√© r√©cup√©r√©s avec succ√®s</p>";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è Aucun v√™tement trouv√© dans la base de donn√©es</p>";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Erreur lors de la r√©cup√©ration des v√™tements: " . $e->getMessage() . "</p>";
}
echo "</div>";

echo "</div>";

// ===============================
// SECTION 2: TESTS DE LA CLASSE ELECTRONIC
// ===============================

echo "<div class='test-block category-electronic'>";
echo "<h2>üì± Tests de la classe Electronic</h2>";

echo "<div class='step'>";
echo "<h3>√âtape 1: Test de la m√©thode create() pour Electronic</h3>";

try {
    // Cr√©ation d'un nouveau produit √©lectronique
    $electronic = new Electronic();
    $electronic->setName("Smartphone Galaxy Ultra");
    $electronic->setDescription("Dernier mod√®le avec 5G et appareil photo 108MP");
    $electronic->setPrice(899.99);
    $electronic->setQuantity(25);
    $electronic->setCategoryId(2); // Cat√©gorie √âlectronique
    
    // Propri√©t√©s sp√©cifiques aux √©lectroniques
    $electronic->setBrand("Samsung");
    $electronic->setWarrantyFee(99);

    echo "<div class='code-block'>";
    echo "Cr√©ation d'un nouveau produit √©lectronique:<br>";
    echo "Nom: " . $electronic->getName() . "<br>";
    echo "Marque: " . $electronic->getBrand() . "<br>";
    echo "Frais de garantie: " . $electronic->getWarrantyFee() . "‚Ç¨<br>";
    echo "Prix: " . $electronic->getPrice() . "‚Ç¨<br>";
    echo "</div>";

    $result = $electronic->create();
    
    if ($result) {
        echo "<p class='success'>‚úÖ Produit √©lectronique cr√©√© avec succ√®s ! ID: " . $result->getId() . "</p>";
        $newElectronicId = $result->getId();
    } else {
        echo "<p class='error'>‚ùå √âchec de la cr√©ation du produit √©lectronique</p>";
        $newElectronicId = null;
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Erreur lors de la cr√©ation: " . $e->getMessage() . "</p>";
    $newElectronicId = null;
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 2: Test de la m√©thode findOneById() pour Electronic</h3>";

if ($newElectronicId) {
    try {
        $electronicTest = new Electronic();
        $foundElectronic = $electronicTest->findOneById($newElectronicId);
        
        if ($foundElectronic) {
            echo "<p class='success'>‚úÖ Produit √©lectronique trouv√© avec l'ID $newElectronicId</p>";
            
            echo "<table class='data-table'>";
            echo "<tr><th>Propri√©t√©</th><th>Valeur</th></tr>";
            echo "<tr><td>ID</td><td>" . $foundElectronic->getId() . "</td></tr>";
            echo "<tr><td>Nom</td><td>" . $foundElectronic->getName() . "</td></tr>";
            echo "<tr><td>Prix</td><td>" . $foundElectronic->getPrice() . "‚Ç¨</td></tr>";
            echo "<tr><td>Stock</td><td>" . $foundElectronic->getQuantity() . "</td></tr>";
            echo "<tr><td>Marque</td><td>" . $foundElectronic->getBrand() . "</td></tr>";
            echo "<tr><td>Frais garantie</td><td>" . $foundElectronic->getWarrantyFee() . "‚Ç¨</td></tr>";
            echo "</table>";
        } else {
            echo "<p class='error'>‚ùå Aucun produit √©lectronique trouv√© avec l'ID $newElectronicId</p>";
        }
        
    } catch (Exception $e) {
        echo "<p class='error'>‚ùå Erreur lors de la recherche: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p class='warning'>‚ö†Ô∏è Impossible de tester findOneById car aucun ID disponible</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 3: Test de la m√©thode update() pour Electronic</h3>";

if ($newElectronicId && isset($foundElectronic)) {
    try {
        // Modification des propri√©t√©s
        $foundElectronic->setName("Smartphone Galaxy Ultra Pro Max");
        $foundElectronic->setPrice(1199.99);
        $foundElectronic->setQuantity(20);
        $foundElectronic->setBrand("Samsung Pro");
        $foundElectronic->setWarrantyFee(149);
        
        echo "<div class='code-block'>";
        echo "Modifications apport√©es:<br>";
        echo "Nouveau nom: " . $foundElectronic->getName() . "<br>";
        echo "Nouveau prix: " . $foundElectronic->getPrice() . "‚Ç¨<br>";
        echo "Nouvelle marque: " . $foundElectronic->getBrand() . "<br>";
        echo "Nouveaux frais garantie: " . $foundElectronic->getWarrantyFee() . "‚Ç¨<br>";
        echo "</div>";
        
        $updateResult = $foundElectronic->update();
        
        if ($updateResult) {
            echo "<p class='success'>‚úÖ Produit √©lectronique mis √† jour avec succ√®s !</p>";
            
            // V√©rification des modifications
            $verifyElectronic = new Electronic();
            $verifiedElectronic = $verifyElectronic->findOneById($newElectronicId);
            
            if ($verifiedElectronic) {
                echo "<h4>V√©rification des modifications:</h4>";
                echo "<table class='data-table'>";
                echo "<tr><th>Propri√©t√©</th><th>Nouvelle valeur</th></tr>";
                echo "<tr><td>Nom</td><td>" . $verifiedElectronic->getName() . "</td></tr>";
                echo "<tr><td>Prix</td><td>" . $verifiedElectronic->getPrice() . "‚Ç¨</td></tr>";
                echo "<tr><td>Marque</td><td>" . $verifiedElectronic->getBrand() . "</td></tr>";
                echo "<tr><td>Frais garantie</td><td>" . $verifiedElectronic->getWarrantyFee() . "‚Ç¨</td></tr>";
                echo "</table>";
            }
        } else {
            echo "<p class='error'>‚ùå √âchec de la mise √† jour du produit √©lectronique</p>";
        }
        
    } catch (Exception $e) {
        echo "<p class='error'>‚ùå Erreur lors de la mise √† jour: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p class='warning'>‚ö†Ô∏è Impossible de tester update car aucun produit √©lectronique disponible</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>√âtape 4: Test de la m√©thode findAll() pour Electronic</h3>";

try {
    $electronicCollection = new Electronic();
    $allElectronics = $electronicCollection->findAll();
    
    echo "<p class='info'>üìä Nombre total de produits √©lectroniques trouv√©s: " . count($allElectronics) . "</p>";
    
    if (count($allElectronics) > 0) {
        echo "<table class='data-table'>";
        echo "<tr><th>ID</th><th>Nom</th><th>Marque</th><th>Prix</th><th>Stock</th><th>Garantie</th></tr>";
        
        foreach ($allElectronics as $electronic) {
            echo "<tr>";
            echo "<td>" . $electronic->getId() . "</td>";
            echo "<td>" . $electronic->getName() . "</td>";
            echo "<td>" . $electronic->getBrand() . "</td>";
            echo "<td>" . $electronic->getPrice() . "‚Ç¨</td>";
            echo "<td>" . $electronic->getQuantity() . "</td>";
            echo "<td>" . $electronic->getWarrantyFee() . "‚Ç¨</td>";
            echo "</tr>";
        }
        echo "</table>";
        echo "<p class='success'>‚úÖ Tous les produits √©lectroniques ont √©t√© r√©cup√©r√©s avec succ√®s</p>";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è Aucun produit √©lectronique trouv√© dans la base de donn√©es</p>";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Erreur lors de la r√©cup√©ration des produits √©lectroniques: " . $e->getMessage() . "</p>";
}
echo "</div>";

echo "</div>";

// ===============================
// SECTION 3: TESTS DE VALIDATION ET ERREURS
// ===============================

echo "<div class='test-block method-test'>";
echo "<h2>üî¨ Tests de validation et gestion d'erreurs</h2>";

echo "<div class='step'>";
echo "<h3>Test 1: Validation des donn√©es obligatoires pour Clothing</h3>";

try {
    $invalidClothing = new Clothing();
    // On n'assigne pas de nom (obligatoire)
    $invalidClothing->setPrice(25.99);
    $invalidClothing->setQuantity(10);
    $invalidClothing->setCategoryId(1);
    $invalidClothing->setSize("M");
    $invalidClothing->setColor(""); // Couleur vide (devrait √©chouer)
    
    $result = $invalidClothing->create();
    
    if (!$result) {
        echo "<p class='success'>‚úÖ Validation correcte: cr√©ation refus√©e pour donn√©es invalides</p>";
    } else {
        echo "<p class='error'>‚ùå Probl√®me de validation: cr√©ation accept√©e malgr√© donn√©es invalides</p>";
    }
    
} catch (Exception $e) {
    echo "<p class='success'>‚úÖ Exception captur√©e correctement: " . $e->getMessage() . "</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>Test 2: Test avec ID inexistant pour findOneById</h3>";

try {
    $clothingTest = new Clothing();
    $result = $clothingTest->findOneById(99999); // ID qui n'existe probablement pas
    
    if ($result === false) {
        echo "<p class='success'>‚úÖ Comportement correct: false retourn√© pour ID inexistant</p>";
    } else {
        echo "<p class='error'>‚ùå Probl√®me: un r√©sultat a √©t√© retourn√© pour un ID inexistant</p>";
    }
    
} catch (Exception $e) {
    echo "<p class='error'>‚ùå Exception inattendue: " . $e->getMessage() . "</p>";
}
echo "</div>";

echo "<div class='step'>";
echo "<h3>Test 3: Validation des frais n√©gatifs</h3>";

try {
    $electronicTest = new Electronic();
    $electronicTest->setWarrantyFee(-50); // Frais n√©gatifs (devrait lever une exception)
    
    echo "<p class='error'>‚ùå Probl√®me: frais n√©gatifs accept√©s</p>";
    
} catch (InvalidArgumentException $e) {
    echo "<p class='success'>‚úÖ Validation correcte: exception lev√©e pour frais n√©gatifs</p>";
    echo "<div class='code-block'>Message d'erreur: " . $e->getMessage() . "</div>";
} catch (Exception $e) {
    echo "<p class='warning'>‚ö†Ô∏è Exception diff√©rente captur√©e: " . $e->getMessage() . "</p>";
}
echo "</div>";

echo "</div>";

// ===============================
// SECTION 4: R√âSUM√â ET RECOMMANDATIONS
// ===============================

echo "<div class='test-block'>";
echo "<h2>üìù R√©sum√© des tests et recommandations</h2>";

echo "<div class='step'>";
echo "<h3>‚úÖ Points positifs observ√©s:</h3>";
echo "<ul>";
echo "<li><strong>H√©ritage fonctionnel:</strong> Les classes Clothing et Electronic √©tendent correctement Product</li>";
echo "<li><strong>Sp√©cialisation r√©ussie:</strong> Chaque classe g√®re ses propri√©t√©s sp√©cifiques</li>";
echo "<li><strong>CRUD complet:</strong> Toutes les op√©rations de base sont impl√©ment√©es</li>";
echo "<li><strong>Gestion transactionnelle:</strong> Utilisation de transactions pour l'int√©grit√© des donn√©es</li>";
echo "<li><strong>Validation des donn√©es:</strong> Contr√¥les des valeurs avant insertion/mise √† jour</li>";
echo "</ul>";
echo "</div>";

echo "<div class='step'>";
echo "<h3>üîß Recommandations d'am√©lioration:</h3>";
echo "<ul>";
echo "<li><strong>S√©curit√©:</strong> Impl√©menter la validation c√¥t√© base de donn√©es avec des contraintes CHECK</li>";
echo "<li><strong>Performance:</strong> Ajouter des index sur les colonnes de recherche fr√©quente (size, color, brand)</li>";
echo "<li><strong>Logging:</strong> Am√©liorer les logs avec des niveaux de s√©v√©rit√© (DEBUG, INFO, WARNING, ERROR)</li>";
echo "<li><strong>Tests unitaires:</strong> Cr√©er des tests automatis√©s avec PHPUnit</li>";
echo "<li><strong>Documentation:</strong> Ajouter des commentaires PHPDoc pour toutes les m√©thodes</li>";
echo "<li><strong>Green IT:</strong> Optimiser les requ√™tes pour r√©duire la consommation √©nerg√©tique</li>";
echo "</ul>";
echo "</div>";

echo "<div class='step'>";
echo "<h3>üõ°Ô∏è Aspects s√©curit√© √† consid√©rer:</h3>";
echo "<ul>";
echo "<li><strong>Injection SQL:</strong> Bien utiliser les requ√™tes pr√©par√©es (d√©j√† fait ‚úÖ)</li>";
echo "<li><strong>Validation input:</strong> V√©rifier les types et formats de donn√©es en entr√©e</li>";
echo "<li><strong>Gestion des erreurs:</strong> Ne pas exposer les d√©tails techniques en production</li>";
echo "<li><strong>Audit trail:</strong> Enregistrer qui fait quoi et quand</li>";
echo "</ul>";
echo "</div>";


?>